// Code generated by dagger-compiler.  Do not edit.
package sg.com.bigspoon.www.BGDashboard.ui;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<UserListFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code UserListFragment} and its
 * dependencies.
 * 
 * Being a {@code Provider<UserListFragment>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<UserListFragment>} and handling injection
 * of annotated fields.
 */
public final class UserListFragment$$InjectAdapter extends Binding<UserListFragment>
    implements Provider<UserListFragment>, MembersInjector<UserListFragment> {
  private Binding<sg.com.bigspoon.www.BGDashboard.BootstrapServiceProvider> serviceProvider;
  private Binding<sg.com.bigspoon.www.BGDashboard.authenticator.LogoutService> logoutService;
  private Binding<ItemListFragment> supertype;

  public UserListFragment$$InjectAdapter() {
    super("sg.com.bigspoon.www.BGDashboard.ui.UserListFragment", "members/sg.com.bigspoon.www.BGDashboard.ui.UserListFragment", NOT_SINGLETON, UserListFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    serviceProvider = (Binding<sg.com.bigspoon.www.BGDashboard.BootstrapServiceProvider>) linker.requestBinding("sg.com.bigspoon.www.BGDashboard.BootstrapServiceProvider", UserListFragment.class);
    logoutService = (Binding<sg.com.bigspoon.www.BGDashboard.authenticator.LogoutService>) linker.requestBinding("sg.com.bigspoon.www.BGDashboard.authenticator.LogoutService", UserListFragment.class);
    supertype = (Binding<ItemListFragment>) linker.requestBinding("members/sg.com.bigspoon.www.BGDashboard.ui.ItemListFragment", UserListFragment.class, false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(serviceProvider);
    injectMembersBindings.add(logoutService);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<UserListFragment>}.
   */
  @Override
  public UserListFragment get() {
    UserListFragment result = new UserListFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<UserListFragment>}.
   */
  @Override
  public void injectMembers(UserListFragment object) {
    object.serviceProvider = serviceProvider.get();
    object.logoutService = logoutService.get();
    supertype.injectMembers(object);
  }
}
